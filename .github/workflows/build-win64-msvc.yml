name: build-swiftray-win64-installer
on: 
  #workflow_dispatch
  push:
    tags:
      - "w*.*.*"
jobs:
  setup-win-mingw-build-environment:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          #- { runner: windows-latest, build: 'cmake', dist: false }
          - { runner: localhost-win10, build: 'cmake', dist: false}

    name: ${{matrix.cfg.runner}} ${{matrix.cfg.build}}

    env:
      VCPKG_INSTALLATION_ROOT: 'C:\vcpkg'

    runs-on: ${{matrix.cfg.runner}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Conan
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        id: conan
        uses: turtlebrowser/get-conan@main

      #- name: Try OpenCV with conan
      #  run: |
      #    cd third_party/opencv
      #    conan install . --build=missing

      # vcpkg cache
      - name: Restore vcpkg and its artifacts.
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ env.VCPKG_INSTALLATION_ROOT }}
            !${{ env.VCPKG_INSTALLATION_ROOT }}/.git
            !${{ env.VCPKG_INSTALLATION_ROOT }}/buildtrees
            !${{ env.VCPKG_INSTALLATION_ROOT }}/downloads
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-cache-key-v1
      
      - name: install opencv (with vcpkg)
        if: ${{ matrix.cfg.runner != 'localhost-win10' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          vcpkg install opencv:x64-windows

      - name: Install Qt5
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        #if: ${{ steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          #cd ${{ github.workspace }}
          #vcpkg install qt5:x64-windows
          python3 -m pip install setuptools wheel
          python3 -m pip install py7zr
          python3 -m pip install aqtinstall==2.1.0
          python3 -m aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 -m debug_info -O ${{ github.workspace }}/Qt

      - name: Create build dir
        shell: cmd
        run: |
          mkdir build
          cd ${{ env.VCPKG_INSTALLATION_ROOT }}
          dir 
          cd installed
          dir include
          dir bin

      - name: Setup msys2
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-make
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-python-conan
      #- name: Set 3GB compile memory
      #  shell: msys2 {0}
      #  run: |
      #    bcdedit /set IncreaseUserVa 3072

      - name: Build libpotrace
        shell: msys2 {0}
        run: |
          echo $PATH
          pwd
          cd third_party/libpotrace
          curl https://potrace.sourceforge.net/download/1.16/potrace-1.16.tar.gz -o potrace-1.16.tar.gz
          tar -xzvf potrace-1.16.tar.gz
          conan install . --build=missing
          conan build .
          conan create . user/testing

      - name: Conan install
        shell: cmd
        run: |
          cd build
          conan install .. --build=missing
          dir
          
      - name: CMake
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        run: |
          #cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo
          #cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_INSTALLATION_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DOpenCV_DIR="${{ env.VCPKG_INSTALLATION_ROOT }}\packages\opencv4_x64-windows\share\opencv4" -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Qt/5.15.2/msvc2019_64/lib/cmake
          cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_INSTALLATION_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Qt/5.15.2/msvc2019_64/lib/cmake
      - name: CMake
        if: ${{matrix.cfg.runner == 'localhost-win10' }}
        shell: cmd
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_INSTALLATION_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_PREFIX_PATH=C:/Dev/Qt/5.15.2/msvc2019_64/lib/cmake

      - name: Build
        shell: cmd
        run: |
          cmake --build build --config RelWithDebInfo --parallel
          cd build
          dir bin
          
      - name: Deploy
        if: ${{matrix.cfg.runner != 'localhost-win10' }}
        run: |
          ${{ github.workspace }}/Qt/5.15.2/msvc2019_64/bin/windeployqt.exe --qmldir src/windows/qml --compiler-runtime build/bin/Swiftray.exe
          cd build
          ls bin
      - name: Deploy
        if: ${{matrix.cfg.runner == 'localhost-win10' }}
        shell: cmd
        run: |
          C:/Dev/Qt/5.15.2/msvc2019_64/bin/windeployqt.exe --qmldir src/windows/qml --compiler-runtime build/bin/Swiftray.exe
          cd build
          ls
          ls bin
      #- name: Deploy
      #  shell: msys2 {0}
      #  run: |
      #    export PATH="/mingw64/bin:$PATH"
      #    windeployqt --qmldir src/windows/qml --compiler-runtime build/release/Swiftray.exe
      #- name: Copy necessary shared libraries
      #  shell: msys2 {0}
      #  run: |
      #- name: Create .msi installer
      #  run: |
